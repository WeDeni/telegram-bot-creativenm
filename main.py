from typing import Tuple
# –ú–æ–∏ –º–æ–¥—É–ª–∏
import database as db
from database import bot, month_mapping, event_map
import admin_cmds
import menu


def check_registration(event_id, user_id): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –µ—â–µ, –¥–∞–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ –¥—Ä—É–≥–æ–π –∫–Ω–æ–ø–∫–µ
    try: # –ü–æ–ø—ã—Ç–∫–∞ –≤–∑—è—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –î–ë, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç Null
        row = db.get_reg_info(event_id, user_id)
    except:
        row = None
    return row


def get_event_id(calldata: str, cut = 0) -> Tuple[str, str]:
    event_id = calldata[cut:]
    day = event_id[6:8].lstrip('0')
    month = month_mapping.get(event_id[9:11], '–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞')
    time = event_id[15:].replace('-', ':')
    event_date = f'*{day} {month}* –≤ *{time}*'
    return event_date, event_id


@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_reg_'))
def call_cancel_reg(call):
    event_date, event_id = get_event_id(call.data, 11)
    db.deregister_user(event_id, call.from_user.id)
    message_text = f'‚ùóÔ∏è–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ *{event_map[event_id]}*, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç {event_date}\n\n_–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –µ—â–µ —Ä–∞–∑, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Å–ª—É—á–∞–π–Ω–æ_ üòâ'
    bot.edit_message_text(message_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=None)


@bot.callback_query_handler(func=lambda call: call.data.startswith('reg_'))
def call_reg(call):
    event_date, event_id = get_event_id(call.data, 4)
    row = check_registration(event_id, call.from_user.id)
    message_text = f'*{event_map[event_id]}*\nüìÖ {event_date}\n\n–°–∫–æ–ª—å–∫–æ –≤–∞—Å –∂–¥–∞—Ç—å? ü§ó'
    if not row: # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        db.register_user(event_id, call.from_user.id, 1)
    markup = menu.how_many_with_you(event_id)
    bot.edit_message_text(message_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('new_tickets_'))
def call_reg(call):
    event_date, event_id = get_event_id(call.data, 12)
    row = check_registration(event_id, call.from_user.id)
    if row: # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞
        message_text = f'*{event_map[event_id]}*\nüìÖ {event_date}\n\n–°–∫–æ–ª—å–∫–æ –≤–∞—Å –∂–¥–∞—Ç—å? ü§ó'
        markup = menu.how_many_with_you(event_id)
    else: # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        message_text = f'‚ùóÔ∏è–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ *{event_map[event_id]}*, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç {event_date}\n\n_–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –ø–æ—Å—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ_ üòâ'
        markup = None
    bot.edit_message_text(message_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('close_dereg'))
def call_close_dereg(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('visitors_'))
def call_visitors(call):
    event_date, event_id = get_event_id(call.data, 11)
    row = check_registration(event_id, call.from_user.id)
    tickets = int(call.data[9:10])
    if row: # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞
        db.change_cell('tickets', tickets, call.from_user.id, event_id)
        message_text = f'‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã\n*{event_map[event_id]}*\nüìÖ {event_date}\nüéü –ë–∏–ª–µ—Ç–∏–∫–æ–≤: *{tickets}*\n\n–£–≤–µ–¥–æ–º–∏—Ç—å –∑–∞ 1 —á–∞—Å –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è?'
        markup = menu.notification(event_id)
        bot.edit_message_text(message_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)
    else: # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('notify_'))
def call_notify(call):
    notification_mode = int(call.data[7:8])
    event_date, event_id = get_event_id(call.data, 9)
    db.change_cell('notification', notification_mode, call.from_user.id, event_id)
    bot.edit_message_text('‚úÖ', call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=None)
    if notification_mode == 1:
        text_variant = 'üîî –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 —á–∞—Å –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    elif notification_mode == 2:
        text_variant = 'üîï –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ *–±–µ–∑ –∑–≤—É–∫–∞* –∑–∞ 1 —á–∞—Å –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    else:
        text_variant = 'üö´ –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç—å'
    row = check_registration(event_id, call.from_user.id)
    try:
        tickets = row[2]
        message_text = f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!\n*{event_map[event_id]}*\nüìÖ {event_date}\nüéü –ë–∏–ª–µ—Ç–∏–∫–æ–≤: *{tickets}*\n\n{text_variant}'
        bot.send_message(call.message.chat.id, message_text, 'Markdown')
    except: # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        bot.delete_message(call.message.chat.id, call.message.message_id)



@bot.message_handler(commands=['start'])
def handle_start(msg):
    key = msg.text.split()[1] if len(msg.text.split()) > 1 else None # –ü–æ–ª—É—á–∞–µ–º key, –∫–æ—Ç–æ—Ä—ã–π –∏–¥–µ—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã start
    
    if key == None: # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –ø—Ä–æ—Å—Ç–æ /start
        # –î–û–î–ï–õ–ê–¢–¨ –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –°–û–ë–´–¢–ò–ô –ì–î–ï –ï–°–¢–¨ –ó–ê–ü–ò–°–¨ –£ –Æ–ó–ï–†–ê ! ! !
        user_event_list = '‚¨áÔ∏è –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∫—É–¥–∞ –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã.'
        for event_id in event_map:
            if db.get_reg_info(event_id, msg.from_user.id):
                row = check_registration(event_id, msg.from_user.id)
                event = event_map[event_id]
                tickets = row[2]
                day = event_id[6:8].lstrip('0')
                month = month_mapping.get(event_id[9:11], '–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞')
                time = event_id[15:].replace('-', ':')
                event_date = f'*{day} {month}* –≤ *{time}*'
                notification_mode = row[3]
                if notification_mode == 1: icon = 'üîî'
                elif notification_mode == 2: icon = 'üîï'
                else: icon = 'üö´'
                user_event_list = user_event_list + f'*\n\n{event}*\nüìÖ {event_date} ({icon})\nüéü –ë–∏–ª–µ—Ç–∏–∫–æ–≤: *{tickets}* ([–ò–∑–º–µ–Ω–∏—Ç—å](https://t.me/CreativeNM_bot?start={event_id}))'
        bot.send_message(msg.chat.id, user_event_list, 'Markdown', disable_web_page_preview=True)

    elif key in event_map: # –ï—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ —Å –∫–ª—é—á–µ–º –∏–≤–µ–Ω—Ç–∞
        event_date, event_id = get_event_id(key)
        row = check_registration(event_id, msg.from_user.id)
        if row: # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞
            tickets = row[2]
            message_text = f'‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å:\n*{event_map[event_id]}*\nüìÖ {event_date}\nüéü –ë–∏–ª–µ—Ç–∏–∫–æ–≤: *{tickets}*'
            markup = menu.change_of_registration(event_id)
            bot.send_message(msg.chat.id, message_text, 'Markdown', reply_markup=markup)
        else: # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            message_text = f'*{event_map[event_id]}*\nüìÖ {event_date}\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?'
            markup = menu.event_registration(event_id)
            bot.send_message(msg.chat.id, message_text, 'Markdown', reply_markup=markup)
    else:
        message_text = f'–¢–∞–∫–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ü§∑‚Äç‚ôÇÔ∏è\n–£—Ç–æ—á–Ω–∏—Ç–µ —Å—Å—ã–ª–∫—É üßê'
        bot.send_message(msg.chat.id, message_text, 'Markdown')


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –Ω–æ–Ω—Å—Ç–æ–ø —Ä–µ–∂–∏–º–µ
bot.infinity_polling()